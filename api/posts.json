{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"","slug":"webpack","date":"2021-07-19T06:24:18.188Z","updated":"2021-07-19T06:24:18.188Z","comments":true,"path":"api/articles/webpack.json","excerpt":"","keywords":null,"cover":null,"content":"","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"cokie，session,localStorage","slug":"cokie，session，storage","date":"2020-12-10T02:12:36.000Z","updated":"2021-07-20T06:49:37.433Z","comments":true,"path":"api/articles/cokie，session，storage.json","excerpt":"","keywords":null,"cover":null,"content":"<p>cokie，session,localStorage的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cokie的内容主要包括：名字、值、过期时间、路径和域。路径与域一起构成cokie的作用范围。若不设置时间，则这个cookie的生命周期为浏览器会话期间，关闭浏览器窗口，cookie就会消失。这种生命期为浏览器会话期的cookie被称为会话期的cookie。</span><br><span class=\"line\">会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若是设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后在打开浏览器这些cookie仍然有效知道超过设定的过期时间，对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</span><br><span class=\"line\"></span><br><span class=\"line\">session机制：当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个</span><br><span class=\"line\">session标识（称为session  id） ，如果已经包含则说明以前已经为此客户端创建过session，服务器就按照session标识 id把这个session检索出来使用（检索不到的话，就会重新创建一个），如果客户端请求不包含session id，则为客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存，保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器</span><br></pre></td></tr></table></figure>\n\n<p>cookie和session的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>cookie数据存放在客户的浏览器上，session数据放在服务器上</span><br><span class=\"line\"><span class=\"number\">2.</span>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全用该使用session</span><br><span class=\"line\"><span class=\"number\">3.</span>session会在一定事件内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie</span><br><span class=\"line\"><span class=\"number\">4.</span>单个cookie保存的数据不能超过4k，很多浏览器都有一个站点最多保存<span class=\"number\">20</span>个cookie</span><br><span class=\"line\"><span class=\"number\">5.</span>建议将登录信息等重要信息存放session，其他信息如果要保留，可以放在cookie中</span><br><span class=\"line\"><span class=\"number\">6.</span>session保存在服务器，客户端不知道其中的信息，cookie保存在客户端，服务器能够知道其中的信息</span><br><span class=\"line\"><span class=\"number\">7.</span>session中保存的是对象，cookie中保存的是字符串</span><br><span class=\"line\"><span class=\"number\">8.</span>session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的</span><br></pre></td></tr></table></figure>\n\n<p>Web Storage和cookie的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Web Storege的概念和cookie相似，区别是它是为了更大容量存储设计的，cookie的大小是受限的，并且每次请求一个新的页面的时候cookie都会被发送过去，这样无形之中浪费了宽带，另外cookie还需要指定作用域，不可跨域调用。</span><br><span class=\"line\">除此之外，web storoage拥有setItem，getItem，removeItem，clear等方法，不想cookie需要前端开发者自己封装setCookie，getCookie，</span><br><span class=\"line\"></span><br><span class=\"line\">但是cookie也是不可或缺的，cookie的作用是与服务器进行交互，作为http规范的一部分存在的，而web Storeage仅仅是为了在本地存储数据而生</span><br><span class=\"line\"></span><br><span class=\"line\">SessionStoreage、<span class=\"built_in\">localStorage</span>、cookie都是在浏览器端讯处的数据，其中sessionStorage的概念很特别，引入了一个浏览器窗口的概念，sessionStorage是在同源窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时独立打开的不同</span><br><span class=\"line\"> sessionStorage、<span class=\"built_in\">localStorage</span>、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的</span><br><span class=\"line\"></span><br><span class=\"line\">Es6的模板字符串有哪些新特性</span><br><span class=\"line\">\t基本的字符串格式化</span><br><span class=\"line\">\t将表达式嵌入字符串中进行拼接</span><br><span class=\"line\">\t用$&#123;&#125;来界定在es5时我们通过反斜杠（）来做多行字符串或者字符串一行行拼接，es6反引号（··）就能解决类模板字符串的功能</span><br><span class=\"line\"></span><br><span class=\"line\">介绍下set、map的区别</span><br><span class=\"line\">应用场景set用于数据重组，map用于数据储存</span><br><span class=\"line\">\tset：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>成员不鞥你重复</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span>只有键值没有键名，类似数组</span><br><span class=\"line\">\t\t<span class=\"number\">3.</span>可以遍历，方法有add，<span class=\"keyword\">delete</span>，has</span><br><span class=\"line\">\tmap：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>本质上是键值对的集合，类似集合</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span>可以遍历，可以跟各种数据格式转换</span><br><span class=\"line\"></span><br><span class=\"line\">ECMAScript6怎么写<span class=\"class\"><span class=\"keyword\">class</span>，为何会出现<span class=\"title\">class</span>？</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">Es6</span>的<span class=\"title\">class</span>可以看做是一个语法糖，它的绝大部分功能<span class=\"title\">es5</span>都可以做到，新的<span class=\"title\">class</span>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"> 1、减少网络流量：一旦数据保存在本地之后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要的来回传递</span></span><br><span class=\"line\"><span class=\"class\"> 2、快速显示数据：性能好，从本地读数据比通过网络从服务器上获得数据快得多，本地数据可以及时获得，再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示</span></span><br><span class=\"line\"><span class=\"class\"> 3、临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用<span class=\"title\">sessionStorage</span>非常方便</span></span><br></pre></td></tr></table></figure>\n\n<p>sessionStorage、localStorage和cookie的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共同点：都是保存在浏览器端，且同源的区别：</span><br><span class=\"line\"><span class=\"number\">1</span>、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和<span class=\"built_in\">localStorage</span>不会自动把数据发送给服务器，仅在本地保存。dookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</span><br><span class=\"line\"><span class=\"number\">2</span>、存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识sessionStorage和<span class=\"built_in\">localStorage</span>虽然也有存储大小的限制，但比cookie大得多，可以达到5m或更大</span><br><span class=\"line\"><span class=\"number\">3</span>、数据有效期不同sessionStorage：仅在当前浏览器窗口关闭之前有效；<span class=\"built_in\">localStorage</span>始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据，cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</span><br><span class=\"line\"><span class=\"number\">4</span>、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</span><br><span class=\"line\">\t<span class=\"built_in\">localStorage</span>在所有同源窗口中都是共享的</span><br><span class=\"line\">\tcookie也是在所有同源创库中都是共享的</span><br><span class=\"line\"><span class=\"number\">5</span>、web Storage支持事件通知机制，可以将数据更新的通知发送给监听者</span><br><span class=\"line\"><span class=\"number\">6</span>、web Storage的api接口使用更方便</span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"理解async await","slug":"async，await","date":"2020-05-02T00:12:36.000Z","updated":"2021-07-20T06:49:12.571Z","comments":true,"path":"api/articles/async，await.json","excerpt":"","keywords":null,"cover":null,"content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Async <span class=\"keyword\">await</span>是用来解决异步的，<span class=\"keyword\">async</span>函数是Generator函数的语法糖使用关键字<span class=\"keyword\">async</span>来表示，在函数内部使用<span class=\"keyword\">await</span>来表示异步<span class=\"keyword\">async</span>函数返回一个promise对象，可以及使用then方法添加回调函数当函数执行的时候，一旦遇到<span class=\"keyword\">await</span>就会先返回，等到异步操作完成，在借着执行函数体内后面的语句</span><br><span class=\"line\"><span class=\"keyword\">async</span>较generator的优势<span class=\"number\">3</span></span><br><span class=\"line\">\t<span class=\"number\">1</span>、内置执行器，generator函数的执行不许依靠执行器，而<span class=\"keyword\">async</span>函数自带执行器，调用方式跟普通函数的调用一样</span><br><span class=\"line\">\t<span class=\"number\">2</span>、更好的语义，<span class=\"keyword\">async</span>和<span class=\"keyword\">await</span>相较*和<span class=\"keyword\">yield</span>更加语义化</span><br><span class=\"line\">\t<span class=\"number\">3</span>、更广的适用性，<span class=\"keyword\">yield</span>命令后面只能 是thunk函数或promise对象，<span class=\"keyword\">async</span>函数的<span class=\"keyword\">await</span>后面可以是promise也可以是原始类型的值】、</span><br><span class=\"line\"><span class=\"number\">4</span>、返回值就是promise，<span class=\"keyword\">async</span>函数返回的是promise对象，比generator函数范湖的iterator对象更方便，可以直接使用then（）方法进行调用</span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"css3新特性和布局","slug":"es6","date":"2020-03-14T12:33:44.000Z","updated":"2021-07-20T06:46:47.370Z","comments":true,"path":"api/articles/es6.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Es6的模板字符串有哪些新特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t基本的字符串格式化</span><br><span class=\"line\">\t将表达式嵌入字符串中进行拼接</span><br><span class=\"line\">用$&#123;&#125;来界定在es5时我们通过反斜杠（）来做多行字符串或者字符串一行行拼接，es6反引号（··）就能解决类模板字符串的功能</span><br></pre></td></tr></table></figure>\n\n<p>介绍下set、map的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">应用场景set用于数据重组，map用于数据储存</span><br><span class=\"line\">\tset：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>成员不鞥你重复</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span>只有键值没有键名，类似数组</span><br><span class=\"line\">\t\t<span class=\"number\">3.</span>可以遍历，方法有add，<span class=\"keyword\">delete</span>，has</span><br><span class=\"line\">\tmap：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>本质上是键值对的集合，类似集合</span><br><span class=\"line\"><span class=\"number\">2.</span>可以遍历，可以跟各种数据格式转换</span><br></pre></td></tr></table></figure>\n\n<p>ECMAScript6怎么写class，为何会出现class？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Es6的<span class=\"class\"><span class=\"keyword\">class</span>可以看做是一个语法糖，它的绝大部分功能<span class=\"title\">es5</span>都可以做到，新的<span class=\"title\">class</span>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法</span></span><br></pre></td></tr></table></figure>\n\n<p>setTimeout、promise、async/await的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件循环中分为宏任务队列和微任务队列其中<span class=\"built_in\">setTimeout</span>的回调函数放在宏任务队列里，等到执行栈清空以后执行promise.then里的回调函数会放到响应宏任务的微任务队列里，等宏任务里面的同步代码执行完在执行<span class=\"keyword\">async</span>函数标识函数里面可能会有异步的方法，<span class=\"keyword\">await</span>后面跟一个表达式<span class=\"keyword\">async</span>方法执行时，遇到<span class=\"keyword\">await</span>会立即执行表达式，然后把表达式后面的代码放到微任务队列里，让出执行栈让同步代码先执行</span><br></pre></td></tr></table></figure>\n\n<p>forEach、for in 、 for of 三者区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach更多的用来遍历数组</span><br><span class=\"line\"> <span class=\"keyword\">for</span> <span class=\"keyword\">in</span> 一般常用来遍历对象或者jsonfor <span class=\"keyword\">of</span>数组对象都可以遍历，遍历对象需要通过和object.keys（） </span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">in</span>循环出的是key，<span class=\"keyword\">for</span> <span class=\"keyword\">of</span>循环出的是value</span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"css3新特性和布局","slug":"css3xin","date":"2019-11-02T02:12:36.000Z","updated":"2021-07-20T06:46:23.737Z","comments":true,"path":"api/articles/css3xin.json","excerpt":"","keywords":null,"cover":null,"content":"<p>什么是flex布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex是flexible box的缩写，顾名思义为弹性布局，用来为盒装模型提供最大的灵活性</span><br></pre></td></tr></table></figure>\n\n<p>布局种类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态布局</span><br><span class=\"line\">自适应布局</span><br><span class=\"line\">流式布局（又叫%半分比布局）</span><br><span class=\"line\">响应式布局:媒体查询</span><br><span class=\"line\">弹性布局（rem/em/flex布局）</span><br></pre></td></tr></table></figure>\n\n<p>静态布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最传统的布局方式，网页中所有尺寸都是由px作为单位，设置了min-width，如果宽度小于就会出现滚动条，如果大于这个宽度则内容居中外加背景</span><br><span class=\"line\">px：实现方式</span><br><span class=\"line\">\tpc：居中布局，所有样式使用绝对宽度/高度（px），设计一个layout，在屏幕宽高有调整时，使用横向和竖向的滚动条来查阅被遮掩部分</span><br><span class=\"line\">\t移动设备：另外建立移动网站，单独设计一个布局，使用不同的域名如wap.或m</span><br><span class=\"line\">\t优点：采用之前的css2的布局-方式，布局简单，没有兼容性问题</span><br><span class=\"line\">缺点：在手机端不能合理的显示，移动端不能使用pc端页面，需要写一个布局来呈现</span><br></pre></td></tr></table></figure>\n\n<p>自适应布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以看成是不同屏幕下由多个静态布局组成的，自适应布局是为不同的屏幕分辨率分别定义不同的布局，改变屏幕分辨率可以切换不同的静态布局（页面元素位置可能发生改变），但在每个静态布局中，页面元素不随窗口大小的调整发生变化</span><br><span class=\"line\">自适应布局页面里面元素的位置会变化，很好的解决了流式布局中的大屏控件利用率不高弊端，屏幕分辨率变化时，页面里面元素的位置变化而大小不会变化</span><br></pre></td></tr></table></figure>\n\n<p>流式布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网页总主要的划分区域的尺寸使用百分数（搭配min-*、max-属性使用）、分别为不同的屏幕设置布局格式，当屏幕大小改变时，会出现不同的布局。</span><br><span class=\"line\">意思就是在这个屏幕下这个元素快在这个地方，但是在那个屏幕下，这个元素快又会出现在那个地方，只是布局改变，元素不变，可以看成是不同屏幕下由多个静态布局组成的。</span><br><span class=\"line\">而流式布局的特点是随着屏幕的改变，页面的布局没有发生大的变化，可以进行适配调整，这个正好与自适应布局相补，，使用%定义宽度，高度大都是用px来固定住，可以根据可视区域和父元素的实时尺寸进行调整，尽可能的适应各种分辨率</span><br><span class=\"line\">往往配合max-width/min-width等属性控制尺寸流动范围以免过大或者过小影响阅读，这种布局方式咋iweb前端开发的早期历史上，用来应对不同尺寸的pc屏幕（那是屏幕尺寸的差异不会太大），在当今的移动端开发也是常用布局方式</span><br></pre></td></tr></table></figure>\n\n<p>响应式布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过响应式设计能使网站在手机和平板电脑上有更好的浏览阅读体验，屏幕尺寸不一样展示给用户的网页内容也不一样，利用媒体查询可以检测到屏幕的尺寸（主要检测宽度），并设置不同的css样式，就可以实现响应式布局，主要依靠css的媒体查询</span><br><span class=\"line\">每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变</span><br></pre></td></tr></table></figure>\n\n<p>弹性布局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rem/em</span><br><span class=\"line\">flex布局</span><br></pre></td></tr></table></figure>\n\n<p>边框</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Border-radius：圆角</span><br><span class=\"line\">Border-image：边框图片</span><br><span class=\"line\">      Box-shadow：阴影</span><br></pre></td></tr></table></figure>\n\n<p>背景</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Css3新增了几个关于背景的属性，分别是background-clip、background-origin、background-size和background-<span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<p>文字效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tText-overflow规定当文本移除包含元素时发生的事情text-overflow:ellipsis（）</span><br><span class=\"line\">\tWord-wrap 强制文本换行</span><br><span class=\"line\">\ttext-shadow：文本阴影，能够规定水平阴影、垂直阴影、模糊巨鹿、以及阴影的颜色。H1&#123;text-shadow:5px 5px 5px red&#125;</span><br><span class=\"line\">\tText-decoration</span><br><span class=\"line\">\t\tCss3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置</span><br><span class=\"line\">\t\tText-fill-color:设置文字内部填充颜色</span><br><span class=\"line\">\t\tText-stroke-color:设置文字边界填充颜色</span><br><span class=\"line\">\t\tText-stroke-width:设置文字边界宽度渐变</span><br><span class=\"line\">linear-gradient（线性渐变）和radial-gradient(径向渐变)</span><br><span class=\"line\">\t\t多列布局</span><br><span class=\"line\">\t\tcolumn-count  column-width column-gap column-rule</span><br><span class=\"line\">\t\t界面</span><br><span class=\"line\">CSS3中，新的用户界面特性包括重设元素尺寸、盒尺寸以及轮廓等。Firefox、Chrome以及Safari 支持resize属性。IE、Chrome、Safari以及Opera支持box-sizing属性。Firefox需要前缀-moz-。所有主流浏览器都支持outline-offset属性，除了IE。</span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"H5新特性","slug":"h5xin","date":"2019-08-25T02:17:54.000Z","updated":"2021-07-20T06:45:57.274Z","comments":true,"path":"api/articles/h5xin.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"h5新增特性\"><a href=\"#h5新增特性\" class=\"headerlink\" title=\"h5新增特性\"></a>h5新增特性</h2><p>表单控件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新特性，新增元素</span><br><span class=\"line\">\t<span class=\"number\">1</span>、内容元素：article、footer、header、nva、section</span><br><span class=\"line\">\t<span class=\"number\">2</span>、表单控件：calendar、date、time、email、url、search</span><br><span class=\"line\">\t<span class=\"number\">3</span>、控件元素：webworker、websockt、Geolocation</span><br><span class=\"line\">移除的元素有</span><br><span class=\"line\">\t<span class=\"number\">1</span>、显现层元素：basefont、big、center、font、s、strike、tt、u</span><br><span class=\"line\">    <span class=\"number\">2</span>、性能较差元素：frame、frameset、noframes</span><br></pre></td></tr></table></figure>\n\n<p>简述一下你对html语义化的理解<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、用正确的标签做正确的事情；</span><br><span class=\"line\"><span class=\"number\">2</span>、html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；</span><br><span class=\"line\"><span class=\"number\">3</span>、即使在没有样式css情况下也以一种文档格式显示，并且是容易阅读的；</span><br><span class=\"line\"><span class=\"number\">4</span>、搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO；</span><br><span class=\"line\"><span class=\"number\">5</span>、始于都源代码的人对网站更容易将网站分块，便于阅读维护和理解</span><br></pre></td></tr></table></figure></p>\n<p>  CSS选择符有哪些？哪些属性可以继承？<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、id选择器  （#app）</span><br><span class=\"line\"><span class=\"number\">2</span>、类选择器 （.app）</span><br><span class=\"line\"><span class=\"number\">3</span>、标签选择器 （div，p，h1）</span><br><span class=\"line\"><span class=\"number\">4</span>、相邻选择器 （h1+p）</span><br><span class=\"line\"><span class=\"number\">5</span>、子级选择器 （ul&gt;li）</span><br><span class=\"line\"><span class=\"number\">6</span>、后代选择器 （li a）</span><br><span class=\"line\"><span class=\"number\">7</span>、通配符选择器（*）</span><br><span class=\"line\"><span class=\"number\">8</span>、属性选择器 （a[rel=<span class=\"string\">&#x27;external&#x27;</span>]）</span><br><span class=\"line\"><span class=\"number\">9</span>、伪类选择器 （a:hover,<span class=\"attr\">li</span>:nth-child）</span><br><span class=\"line\"><span class=\"number\">10</span>、可继承的样式：font-size font-family color UL LI DL DD DT</span><br><span class=\"line\"><span class=\"number\">11</span>、不可继承的样式</span><br></pre></td></tr></table></figure></p>\n<p>  页面导入样式时使用link和@import 有什么区别？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、link属于XHTML标签，而@<span class=\"keyword\">import</span>是css提供的</span><br><span class=\"line\"><span class=\"number\">2</span>、页面被加载时，link会同时被加载，而@<span class=\"keyword\">import</span>引用的css会等到页面被加载完在加载；</span><br><span class=\"line\"><span class=\"number\">3</span>、@<span class=\"keyword\">import</span>只在IE5以上才能识别，而link是XHTML标签，无兼容问题</span><br><span class=\"line\"><span class=\"number\">4</span>、link方式的样式的权重高于@<span class=\"keyword\">import</span>的权重</span><br></pre></td></tr></table></figure>\n\n<p>THML5 canvas元素有什么用？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在HTML上进行图形操作， &lt;canvas id=<span class=\"string\">&#x27;canval&#x27;</span> width=<span class=\"string\">&#x27;300&#x27;</span> height=<span class=\"string\">&#x27;100&#x27;</span>&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n\n<p>HTML5存储类型有什么区别？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、HTML5能够本地存储数据，在之前都是使用cookie使用的，HTML5提供了下面两种本地存储方案</span><br><span class=\"line\">\t<span class=\"number\">1</span>、<span class=\"built_in\">localStorage</span> 用于存储持久化的本地存储，数据永远不会过期，关闭浏览器也不会丢失</span><br><span class=\"line\">\t<span class=\"number\">2</span>、sessionStorage 同一个会话的页面才能访问并且当会话结束后数据也会随之销毁，所以sessionStorage不是一种持久化的本地</span><br><span class=\"line\">介绍一下css的盒模型</span><br><span class=\"line\">\t<span class=\"number\">1</span>、有两种，IE盒模型、标准W3c盒模型，IE的content部分包含了border和padding</span><br><span class=\"line\"><span class=\"number\">2</span>、盒模型：包含了 内容（content），填充（padding）、边界（margin）、边框（border）</span><br></pre></td></tr></table></figure>\n\n<p>HTML5新增的表单属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">placehoder属性，简短的提示在用户输入值前会显示在输入域上，即我们常见的输入框默认提示，在用户输入后消失。</span><br><span class=\"line\">required属性，是一个boolean属性，要求填写的输入域不能为空</span><br><span class=\"line\">pattern属性，描述了一个正则表达式用于验证&lt;input&gt;元素的值</span><br><span class=\"line\">min和max属性，设置元素最小值与最大值</span><br><span class=\"line\">step属性，为输入域规定合法的数字间隔</span><br><span class=\"line\">height和width属性，用于image类型的&lt;input&gt;标签的图像高度和宽度</span><br><span class=\"line\">autofocus属性，是一个<span class=\"built_in\">Boolean</span>属性，规定在页面加载时，域自动的获得焦点</span><br><span class=\"line\">multiple属性，是一个<span class=\"built_in\">Boolean</span>属性，规定&lt;input&gt;元素中可选择多个值</span><br></pre></td></tr></table></figure>\n\n<p>Doctype作用？严格模式与混杂模式如何区分？他们有何意义？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、&lt;!Doctype&gt;声明位于文档中的最前面，处于&lt;html&gt;标签之前。告知浏览器的解析器，用什么文档类型规范来解析这个文档。</span><br><span class=\"line\"><span class=\"number\">2</span>、严格模式的排版和js运作模式是以该浏览器支持的最高标准运行</span><br><span class=\"line\"><span class=\"number\">3</span>、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作</span><br><span class=\"line\"><span class=\"number\">4</span>、DOCTYPE不存在或格式不正确会导致文档以会在模式呈现</span><br></pre></td></tr></table></figure>\n\n<p>HTML和Xhtml的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了规范HTML，w3c结合XML制定了XHTML1<span class=\"number\">.0</span>标准，这个标准没有增加任何新的tag，只是按照XML的要求来规范HTML</span><br><span class=\"line\"><span class=\"number\">1</span>、XHTML中的标签都必须被正确的嵌套，HTML中的某些标签可以彼此不正确的嵌套。</span><br><span class=\"line\"><span class=\"number\">2</span>、XHTML中的所有标签必须要关闭</span><br><span class=\"line\"><span class=\"number\">3</span>、XHTML中规范定义：标签名和属性对大小写敏感，所有XHTML标签必须用小写字母。</span><br><span class=\"line\"><span class=\"number\">4.</span>XHTML文档必须拥有根元素。</span><br><span class=\"line\"><span class=\"number\">5</span>、XHTML中标签的属性值要用双引号。</span><br><span class=\"line\"><span class=\"number\">6</span>、新的HTML5文档类型和字符集是  &lt;!doctype html&gt;</span><br><span class=\"line\"><span class=\"number\">7</span>、HTML5使用utf-<span class=\"number\">8</span>字符集&lt;meta charset=<span class=\"string\">&#x27;UTF-8&#x27;</span>&gt;</span><br><span class=\"line\"><span class=\"number\">8</span>、行内元素：a b span img input select strong</span><br><span class=\"line\">      块级元素:  div ul ol li dl dt dd h1 h2 h3 h4 p等</span><br><span class=\"line\">      空元素有  &lt;img&gt; &lt;link&gt; &lt;meta&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Html5中如何嵌入音频？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTML5提供了播放音频文件的标准， &lt;audio&gt; 元素</span><br><span class=\"line\">Control 属性供添加播放，暂停和音量控件。</span><br><span class=\"line\">\t在&lt;audio&gt;与&lt;/audio&gt;之间你需要插入浏览器不支持的&lt;audio&gt;元素的提示文本。</span><br><span class=\"line\">\t&lt;audio&gt;元素允许使用多个&lt;source&gt;元素&lt;source&gt;元素可以连接不同的音频文件，浏览器将使用第一个支持的音频文件</span><br><span class=\"line\">目前，&lt;audio&gt;元素支持三种音频格式文件:MP3,WAV和ogg</span><br></pre></td></tr></table></figure>\n\n<p>Html5中国如何嵌入视频</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">control提供了播放、暂停和音量控件来控制视频。也可以使用dom操作来控制视频的播放暂停，如play()he pause()方法</span><br><span class=\"line\">同时video元素也提供了width和height属性控制视频的尺寸，如果设置的高度，所需的视频空间会在页面加载时保留，如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的控件，页面就会根据原始视频的大小而改变，与标签之间插入的内容时提供给不支持video元素的浏览器显示的，video元素支持多个source元素，元素可以连接不同的视频文件。浏览器将使用第一个可识别的格式（mp4，webm和ogg）<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"es6和es5的区别","slug":"es6ores5","date":"2019-05-10T13:45:54.000Z","updated":"2021-07-20T06:46:59.058Z","comments":true,"path":"api/articles/es6ores5.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Es6和es5的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECMAscript，即es5，是ECMAScript的第五次修订，于<span class=\"number\">2009</span>年完成标准化，ECMAScript6，即es6，是ECMAScript的第六次修订，于<span class=\"number\">2015</span>年完成，也称为ES2015，Es6是继es5之后的一次改进，相对于es5更加简介，提高了开发效率es6新增的一些特性：</span><br><span class=\"line\">\t<span class=\"number\">1</span>、<span class=\"keyword\">let</span>声明变量和<span class=\"keyword\">const</span>声明常量，两个都有块级作用域，es5中是没有块级作用域的，并且<span class=\"keyword\">var</span>有变量提升，在<span class=\"keyword\">let</span>中，使用的变量一定要进行声明</span><br><span class=\"line\">\t<span class=\"number\">2</span>、箭头函数es6中的函数定义不在使用关键字<span class=\"function\"><span class=\"keyword\">function</span>，而是利用了（）=&gt;来进行定义</span></span><br><span class=\"line\"><span class=\"function\">\t3、模板字符串是增强版的字符串，用反引号（``）标识，可以当做普通字符创使用，也可以用来定义多行字符串</span></span><br><span class=\"line\"><span class=\"function\">\t4、解构赋值<span class=\"title\">es6</span>允许按照一定模式，从数组和对象中提取值，对变量进行赋值，</span></span><br><span class=\"line\"><span class=\"function\">\t5、<span class=\"title\">for</span> <span class=\"title\">of</span> 可以遍历数组，<span class=\"title\">set</span>和<span class=\"title\">map</span>解构，某些类似数组的对象，对象，以及字符串</span></span><br><span class=\"line\"><span class=\"function\">\t6、<span class=\"title\">import</span>、<span class=\"title\">export</span>导入导出<span class=\"title\">es6</span>标准中，<span class=\"title\">js</span>原生支持模块，将<span class=\"title\">js</span>代码分割成不同功能的小块进行模块化，将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用</span></span><br><span class=\"line\"><span class=\"function\">\t7、<span class=\"title\">set</span>数据结构<span class=\"title\">set</span>数据结构，类似数组，所有的数据都是唯一的，没有重复的值，它本身是一个构造函数</span></span><br><span class=\"line\"><span class=\"function\">\t8、…展开运算符可以将数组或对象里面的值展开，还可以将多个值手机为一个变量</span></span><br><span class=\"line\"><span class=\"function\">\t9、修饰器@<span class=\"title\">decorator</span>是一个函数，用来修改类甚至于是方法的行为，修饰器本质就是编译时执行的函数</span></span><br><span class=\"line\"><span class=\"function\">\t10、<span class=\"title\">class</span>类的继承<span class=\"title\">es6</span>中不再像<span class=\"title\">es5</span>一样使用原型链实现继承，而是引入<span class=\"title\">class</span>这个概念</span></span><br><span class=\"line\"><span class=\"function\">\t11、<span class=\"title\">async</span>、<span class=\"title\">await</span>的使用，搭配<span class=\"title\">promise</span>可以通过编写形式同步的代码来处理异步流程，提高代码的简洁性和可读性<span class=\"title\">async</span>用于声明一个<span class=\"function\"><span class=\"keyword\">function</span>是异步的，而<span class=\"title\">await</span>用于等待一个异步方法执行完成</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">\t12、<span class=\"title\">promise</span>是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理，更强大</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">\t13、<span class=\"title\">symbol</span>是一种基本类型，<span class=\"title\">symbol</span>通过调用<span class=\"title\">symbol</span>函数产生，它接收一个可选的名字参数，该函数返回的<span class=\"title\">symbol</span>是惟一的</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">14、<span class=\"title\">proxy</span>代理使用代理<span class=\"title\">Proxy</span>监听对象的操作，然后可以做一些相应事情-</span></span></span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"第一篇文章","slug":"mapone","date":"2019-01-16T09:50:46.000Z","updated":"2021-07-20T06:47:49.138Z","comments":true,"path":"api/articles/mapone.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"1、概述js\"><a href=\"#1、概述js\" class=\"headerlink\" title=\"1、概述js\"></a>1、概述js</h2><p>1、JavaScript是目前web开发中不可缺少的脚本语言，js不需要编译即可运行，运行在     客户端，需要通过浏览器来解析执行JavaScript代码</p>\n<pre><code>诞生于1995年，当时的主要目的是验证表单的数据是否合法。\n\nJavaScript本来应该叫Livescript，但是在发布前夕，想搭上当时超热的java顺风车，\n\n临时把名字改为了JavaScript。（也就是说js跟java没有关系，当时只是想借助java的名气）。\n</code></pre>\n<p>2、js组成部分<br>（1）核心（ECMAScript）：这一部分主要是js的基本语法。</p>\n<p>（2）BOM：Brower Object Model（浏览器对象模型），主要是获取浏览器信息或操作浏览器的，例如：浏览器的前进与后退、浏览器弹出提示框、浏览器地址栏输入网址跳转等操作等。</p>\n<p>（3）DOM：Document Object Model（文档对象模型），此处的文档暂且理解为html，html加载到浏览器的内存中，可以使用js的DOM技术对内存中的html节点进行修改，用户从浏览器看到的是js动态修改后的页面。（增删改查）</p>\n<p>3、js特点<br>        1）交互性（它可以做的就是信息的动态交互）<br>        2）安全性（不允许直接访问本地硬盘）<br>        3）跨平台性（只要是可以解析js的浏览器都可以执行，和平无关）</p>\n<p>4、js的作用<br>    avaScript 被用来改进设计、验证表单、检测浏览器、创建cookies，等等。JavaScript 是因特网上最流行的脚本语言，并且可在所有主要的浏览器中运行，比如： Internet Explorer、 Maxthon、Mozilla、Firefox、Netscape、Chrome和 Opera等。</p>\n<p>在目前学习阶段只要记住最常用的二个：（1）运态修改html及css代码 （2）验证表单</p>\n<p>5、书写位置<br>    5.1、内嵌式：</p>\n<p>理论上js可以书写在页面的任意位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;内嵌式&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>5.2、外链式：</p>\n<p>首先新建一个文件类型为.js的文件，然后在该文件中写js语句，通过script标签对引入到html页面中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;js文件路径地址&quot;</span>&gt;这里不能写js语句&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>5.3、行内式：</p>\n<p>直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。     onclick单击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;点我呀!&quot;</span> onclick=<span class=\"string\">&quot;alert(&#x27;点我干啥!^6^&#x27;);&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;恭喜你,中 500 万.&#x27;);&quot;</span>&gt;</span>点我呀!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>6、注释<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行注释：\t\t<span class=\"comment\">//\t注释语句\t\t快捷键ctrl+/</span></span><br><span class=\"line\">多行注释：\t\t<span class=\"comment\">/* 注释语句 */</span>    快捷键ctrl+shift+/   </span><br><span class=\"line\">注意：多行注释相互不能嵌套使用，只能在多行注释里面使用单行注释！</span><br></pre></td></tr></table></figure></p>\n<pre><code>7、数据类型：\n</code></pre>\n<p>Js中的数据类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值型：number（凡是数字都是数值型，不区分整数和小数）</span><br><span class=\"line\">字符串：string（凡是引号包裹起来的内容全部都是字符串）</span><br><span class=\"line\">布尔：boolean（<span class=\"literal\">true</span>、<span class=\"literal\">false</span>）</span><br><span class=\"line\">对象类型：object（特殊取值<span class=\"literal\">null</span>）</span><br><span class=\"line\">未定义型：<span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>8、变量：</p>\n<p>8.1、定义：就是存放数据的、内疗可以存储任意数据</p>\n<p>8.2、声明变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 变量名称 = 存储的数据;   \t(variable 变量)</span><br></pre></td></tr></table></figure>\n<p>8.3、变量命名规范：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\t只能由字母、数字、_（下划线）、$（美元符号）组成。</span><br><span class=\"line\"><span class=\"number\">2.</span>\t不能以数字开头。</span><br><span class=\"line\"><span class=\"number\">3.</span>\t命名中不能出现-（js会理解成减号进行减法的操作），不能和关键字冲突。</span><br></pre></td></tr></table></figure>\n\n<p>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值型：<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;\t<span class=\"keyword\">var</span> d = <span class=\"number\">2.35</span>;</span><br><span class=\"line\">字符串：<span class=\"keyword\">var</span> str = <span class=\"string\">&quot;用心学习&quot;</span>;</span><br><span class=\"line\">布尔型：<span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>9、检测数据类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span>(value); 或者<span class=\"keyword\">typeof</span> value;     返回这个变量的类型. </span><br><span class=\"line\">说明 : 同一个变量, 可以进行不同类型的数据赋值.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    alert(<span class=\"keyword\">typeof</span> a);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    a = <span class=\"number\">998</span>;</span><br><span class=\"line\">    alert(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// number</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    a = <span class=\"string\">&quot;用心学习&quot;</span>;</span><br><span class=\"line\">    alert(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// string</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    a = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    alert(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">// boolean</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>10、算术运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+\t-\t*\t/\t%\t++\t--</span><br></pre></td></tr></table></figure>\n\n<p>注意</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\t由于js中的小数和整数都是number类型，不存在类似整数除以整数还是整数的结论。</span><br><span class=\"line\"><span class=\"number\">2.</span>\t字符串和其他的数据使用+号运算，会连接成一个新的字符串。</span><br><span class=\"line\"><span class=\"number\">3.</span>\t字符串使用除了+以外的运算符：如果字符串本身是一个数字，那么会自动转成number进行运算</span><br><span class=\"line\">，否则就会返回一个<span class=\"literal\">NaN</span>的结果，表示这不是一个数字。<span class=\"literal\">NaN</span>：not a number</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    alert(<span class=\"number\">1234</span> / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>); <span class=\"comment\">// 1234</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">&quot;12&quot;</span>;</span><br><span class=\"line\">     s -= <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(s);  <span class=\"comment\">// 2</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">&quot;aa&quot;</span>;</span><br><span class=\"line\">    s -= <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(s);  <span class=\"comment\">// NaN       Not a Number 不是一个数字</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"string\">&quot;12&quot;</span>;</span><br><span class=\"line\">    s += <span class=\"number\">10</span>;</span><br><span class=\"line\">    alert(s);       <span class=\"comment\">// 1210 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>11、关系（比较）运算符</p>\n<figure class=\"highlight plaintext\"><figcaption><span>></span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==\t等于（只比较内容）\t===\t恒等于（比较内容的同时还要比较数据类型）</span><br><span class=\"line\">注意：关系运算符返回的结果只有两个：true / false</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问1 : 3 &gt; 5, 结果为 ?</span></span><br><span class=\"line\">    alert(<span class=\"number\">3</span> &gt; <span class=\"number\">5</span>);   <span class=\"comment\">// false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问2 : “22” == 22  结果为 ?</span></span><br><span class=\"line\">    alert(<span class=\"string\">&quot;22&quot;</span> == <span class=\"number\">22</span>); <span class=\"comment\">// true  (仅仅判断数值)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问3 : “22” === 22  结果为 ?</span></span><br><span class=\"line\">    alert(<span class=\"string\">&quot;22&quot;</span> === <span class=\"number\">22</span>);  <span class=\"comment\">// false  (恒等于, 数值和类型都要相等)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>12、逻辑运算符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;&amp;\t \t与\t\t<span class=\"literal\">true</span>&amp;&amp;<span class=\"literal\">false</span>\t\t====&gt;<span class=\"literal\">false</span></span><br><span class=\"line\">|| \t\t或\t\t<span class=\"literal\">true</span>||<span class=\"literal\">false</span>\t\t\t====&gt;<span class=\"literal\">true</span></span><br><span class=\"line\">！ \t\t非\t\t!<span class=\"literal\">true</span>\t\t\t\t====&gt;<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">false</span>（理解）：<span class=\"literal\">false</span>,  <span class=\"number\">0</span>,  <span class=\"literal\">null</span>,  <span class=\"literal\">undefined</span> </span><br><span class=\"line\"><span class=\"literal\">true</span>（理解）：<span class=\"literal\">true</span>, 非<span class=\"number\">0</span>,  非<span class=\"literal\">null</span>,  非<span class=\"literal\">undefined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">针对 &amp;&amp; 顺口溜: 找第一个出现的假值. (一假即假)</span><br><span class=\"line\">针对 || 顺口溜: 找第一个出现的真值. (一真即真)</span><br></pre></td></tr></table></figure>\n\n<p>演示一：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 短路与 (一假即假)</span></span><br><span class=\"line\">    <span class=\"comment\">// 口诀 : 找第一个为假的值.</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问1 :  8 &lt; 7 &amp;&amp; 3 &lt; 4, 结果为 ?</span></span><br><span class=\"line\">    alert(<span class=\"number\">8</span> &lt; <span class=\"number\">7</span> &amp;&amp; <span class=\"number\">3</span> &lt; <span class=\"number\">4</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问2 :  -2 &amp;&amp; 6 + 6 &amp;&amp; null 结果为 ?</span></span><br><span class=\"line\">    alert(-<span class=\"number\">2</span> &amp;&amp; <span class=\"number\">6</span> + <span class=\"number\">6</span> &amp;&amp; <span class=\"literal\">null</span>); <span class=\"comment\">// null</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 请问3 :  1 + 1 &amp;&amp; 0 &amp;&amp; 5  结果为 ?</span></span><br><span class=\"line\">    alert(<span class=\"number\">1</span> + <span class=\"number\">1</span> &amp;&amp; <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">5</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>演示二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 短路或 : 一真即真.</span></span><br><span class=\"line\"><span class=\"comment\">// 口诀 : 找第一个为真的值.</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问1 :  0 || 23 结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"number\">0</span> || <span class=\"number\">23</span>); <span class=\"comment\">// 23</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问2 :  0 || false || true  结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"number\">0</span> || <span class=\"literal\">false</span> || <span class=\"literal\">true</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问3 :  null || 10 &lt; 8 || 10 + 10结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"literal\">null</span> || <span class=\"number\">10</span> &lt; <span class=\"number\">8</span> || <span class=\"number\">10</span> + <span class=\"number\">10</span>);  <span class=\"comment\">// 20</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问4 :  null || 10 &lt; 8 || false结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"literal\">null</span> || <span class=\"number\">10</span> &lt; <span class=\"number\">8</span> || <span class=\"literal\">false</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>13、三元运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">条件？表达式<span class=\"number\">1</span>：表达式<span class=\"number\">2</span></span><br><span class=\"line\">如果条件为<span class=\"literal\">true</span>，返回表达式<span class=\"number\">1</span>的结果</span><br><span class=\"line\">如果条件为<span class=\"literal\">false</span>，返回表达式<span class=\"number\">2</span>的结果</span><br></pre></td></tr></table></figure>\n<p>演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问1 :  3 ? “aaa” : “bbb” 结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"number\">3</span> ? <span class=\"string\">&quot;aaa&quot;</span> : <span class=\"string\">&quot;bbb&quot;</span>);       <span class=\"comment\">// aaa</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 请问2 :  0 ? “ccc” : “ddd”  结果为 ?</span></span><br><span class=\"line\">alert(<span class=\"number\">0</span> ? <span class=\"string\">&quot;ccc&quot;</span> : <span class=\"string\">&quot;ddd&quot;</span>);       <span class=\"comment\">// ddd</span></span><br></pre></td></tr></table></figure>\n\n<p>14、if条件语句<br>演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">var</span> score = <span class=\"number\">59</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          alert(<span class=\"string\">&quot;不及格&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>15、switch分支结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">var</span> score = <span class=\"number\">59</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 需求 : 将需要一个整型数值, 不想要小数点.</span></span><br><span class=\"line\">      <span class=\"comment\">// window 对象的 parseInt 方法.</span></span><br><span class=\"line\">      score = <span class=\"built_in\">window</span>.parseInt(score / <span class=\"number\">10</span> + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// alert(score);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (score) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">              alert(<span class=\"string\">&quot;优秀!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">              alert(<span class=\"string\">&quot;良好!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">              alert(<span class=\"string\">&quot;及格!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              alert(<span class=\"string\">&quot;不及格!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>16、循环结构 while、do-while. for;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(循环条件)&#123;循环体;&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;循环体;&#125;<span class=\"keyword\">while</span>(循环条件);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(循环变量赋初值；循环条件；循环变量增值)&#123;循环语句;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log（...）; 以日志的形式在控制台输出结果！</span><br></pre></td></tr></table></figure>\n<p>演示:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 需求 : 统计 1~100 之间能够被3和7整除的数字个数</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1. 遍历 1~100 之间的所有整型数值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 2. 判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span> &amp;&amp; i % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// alert(i);</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">            <span class=\"comment\">// 3. 累加个数</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. 查看结果</span></span><br><span class=\"line\">    <span class=\"comment\">// alert(count);</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(count);  <span class=\"comment\">//21  42  63  84  4</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>17、循环嵌套<br>演示案例9*9乘法表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">       table &#123;</span><br><span class=\"line\">           <span class=\"comment\">/* 将 table 表格的线变成了细线 */</span></span><br><span class=\"line\">           border-collapse: collapse;</span><br><span class=\"line\">           <span class=\"comment\">/*color: red;*/</span></span><br><span class=\"line\">           border-color: red;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       <span class=\"comment\">// 需求 : 九九乘法口诀表</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;table border=&#x27;1px solid red&#x27; cellspacing=&#x27;0&#x27; cellpadding=&#x27;8px&#x27;&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;caption&gt;九九乘法口诀表&lt;/caption&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;tr&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">               <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;td&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">               <span class=\"built_in\">document</span>.write(j + <span class=\"string\">&quot;*&quot;</span> + i + <span class=\"string\">&quot;=&quot;</span> + (j*i) + <span class=\"string\">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">               <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;/td&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">           <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;/tr&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">       <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;/table&gt;&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">   </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>18、自定义函数<br>函数是命名的独立的语句段，这个语句段可以被当作一个整体来引用和执行<br>格式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">形式参数</span>)</span>&#123;函数体&#125;</span><br><span class=\"line\">调用函数：函数名(实际参数);</span><br></pre></td></tr></table></figure>\n<p>18.1、函数只有被调用后才会执行</p>\n<p>18.2、如果函数需要返回值、直接使用return 返回、不会像java一样要考虑返回值的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 定义一个函数 : function</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">666</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用函数 :</span></span><br><span class=\"line\">    alert(demo2());</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>18.3、如果函数需要传递参数、不需要指定参数的类型、直接使用变量即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 定义一个函数 : function</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo3</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用函数 :</span></span><br><span class=\"line\">    alert(demo3(<span class=\"number\">10</span>, <span class=\"number\">20</span>));<span class=\"comment\">//显示30</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>18.4、js中出现二个重名的函数名、后者会把前面的覆盖掉</p>\n<p>对比java、java有重载（同名不同参）、重写（同名同参同返回值类型、方法体不一样）</p>\n<p>演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 定义一个函数 : function</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo4</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;调用1...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       alert(<span class=\"string\">&quot;调用2...&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    demo4(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">    demo4();</span><br><span class=\"line\">    <span class=\"comment\">//会调用两次弹框</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>19、匿名函数<br>匿名函数是没有名字的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">形式参数</span>)</span>&#123;函数体&#125;</span><br><span class=\"line\">调用方式：将匿名函数赋值给一个变量，通过变量名调用函数</span><br><span class=\"line\">定义函数并赋值给变量：<span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">形式参数</span>)</span>&#123;函数体&#125;</span><br><span class=\"line\">调用函数：fn(实际参数);</span><br></pre></td></tr></table></figure>\n<p>演示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 匿名函数 : 没有名称的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> func = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, u</span>) </span>&#123;</span><br><span class=\"line\">        alert(i + <span class=\"string\">&quot; love &quot;</span> + u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用函数 :</span></span><br><span class=\"line\">   func(<span class=\"string\">&quot;柳岩&quot;</span>, <span class=\"string\">&quot;小白&quot;</span>);<span class=\"comment\">//显示柳岩love小白</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>20、案例-轮播图</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">说明<span class=\"number\">1</span> : script 标签需要放在 body 标签之后.</span><br><span class=\"line\"> </span><br><span class=\"line\">说明<span class=\"number\">2</span> : <span class=\"built_in\">window</span>.setInterval(“字符串函数名称()”, 时间毫秒数);</span><br><span class=\"line\"> </span><br><span class=\"line\">说明<span class=\"number\">3</span> : <span class=\"built_in\">window</span>.setInterval(函数名称, 时间毫秒数);</span><br><span class=\"line\"> </span><br><span class=\"line\">说明<span class=\"number\">4</span> : <span class=\"built_in\">window</span>.setInterval(匿名函数, 时间毫秒数);            推荐使用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>轮播图<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-tag\">div</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        <span class=\"selector-tag\">img</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../img/01.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;图片&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>实现一:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 获取 img 标签</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// alert(img);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1.2 定义一个函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeImageSrc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        img.src = <span class=\"string\">&quot;../img/0&quot;</span>+count+<span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 2. 循环切换图片</span></span><br><span class=\"line\">    <span class=\"comment\">// window.setInterval(函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的函数.</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用方式一 :</span></span><br><span class=\"line\">    <span class=\"comment\">// window.setInterval(&quot;changeImageSrc()&quot;, 1000);</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用方式二 :</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setInterval(changeImageSrc, <span class=\"number\">1000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实现二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 获取 img 标签</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// alert(img);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 2. 循环切换图片</span></span><br><span class=\"line\">    <span class=\"comment\">// window.setInterval(匿名函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的匿名函数.</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        img.src = <span class=\"string\">&quot;../img/0&quot;</span>+count+<span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>21、js事件<br>21.1、事件概述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件三要素：</span><br><span class=\"line\"><span class=\"number\">1.</span>\t事件源：被监听的html元素（就是这个事件加给谁），就是某个（某些）html标签</span><br><span class=\"line\"><span class=\"number\">2.</span>\t事件类型：某类动作，例如点击事件，移入移除事件，敲击键盘事件等</span><br><span class=\"line\"><span class=\"number\">3.</span>\t执行指令：事件触发后需要执行的代码，一般使用函数进行封装</span><br><span class=\"line\">语法格式：事件源.事件类型=执行指令</span><br></pre></td></tr></table></figure>\n\n<p>21.2、常用的事件：<br>事件名:           描述<br>onload       某个页面或图像被完成加载<br>onsubmit:     当表单提交时出发该事件—注意事件源是表单form<br>onclick :     鼠标点击某个对象<br>ondblclick:   鼠标双击某个对象<br>onblur:       元素失去焦点，通常针对表单元素<br>onfocus  :    元素获得焦点，通常针对表单元素<br>onchange :    用户改变域的内容，通常针对表单元素<br>onkeydown :   某个键盘的键被按下<br>onkeypress：  某个键盘的键按下或按住<br>onkeyup  ：    某个键盘的键被松开<br>onmousedown ： 某个鼠标按键被按下<br>onmouseup  ：  某个鼠标按键被松开<br>onmouseover：  鼠标被移到某元素之上<br>onmouseout；  鼠标从某元素移开<br>onmousemove ： 鼠标被移动</p>\n<p>案例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>事件<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 窗口 : window 对象提供了一个事件类型  onload 页面加载完成事件.</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"comment\">// 事件源 : window    事件类型 : 页面加载完成事件 (onload)  执行指令: 就是赋值的 function 函数.</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"comment\">// 获取页面的 btn 按钮</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"comment\">// alert(btn);</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"comment\">// 给 btn 按钮绑定一个事件 (单击事件 onclick)</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"comment\">// 事件源 : btn按钮    事件类型 : 单击事件 (onclick)  执行指令: 就是赋值的 function 函数.</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                alert(<span class=\"string\">&quot;恭喜你, 中了 500 万!&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"> </span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"自我介绍","slug":"yu","date":"2018-12-13T08:10:56.000Z","updated":"2021-07-20T06:48:07.530Z","comments":true,"path":"api/articles/yu.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"介绍一下\"><a href=\"#介绍一下\" class=\"headerlink\" title=\"介绍一下\"></a>介绍一下</h2><pre><code>    大家好，我的名字叫做 gao-libo，今天19岁了，在行业做的世间不长，但是有在一点点的进步。\n\n其实前端这个行业呢，是很考验耐心的，假如说你写的代码里面出现了一个bug，但是还不报错，\n\n这个时候你就抓耳挠腮了，急的上蹿下跳。自我认为耐心还是挺不错的一个小青年，也不太喜欢说话，\n\n但是跟熟悉的人在一起的话就是一个二货，所以选择了这个行业。\n\n从今天开始我就要用博客来一点点的记录生活中的点滴，积累的一些经验\n\n谢谢大家，\n</code></pre>\n","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}