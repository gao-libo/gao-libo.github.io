{"title":"es6和es5的区别","slug":"es6ores5","date":"2019-05-10T13:45:54.000Z","updated":"2021-07-20T06:46:59.058Z","comments":true,"path":"api/articles/es6ores5.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>Es6和es5的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ECMAscript，即es5，是ECMAScript的第五次修订，于<span class=\"number\">2009</span>年完成标准化，ECMAScript6，即es6，是ECMAScript的第六次修订，于<span class=\"number\">2015</span>年完成，也称为ES2015，Es6是继es5之后的一次改进，相对于es5更加简介，提高了开发效率es6新增的一些特性：</span><br><span class=\"line\">\t<span class=\"number\">1</span>、<span class=\"keyword\">let</span>声明变量和<span class=\"keyword\">const</span>声明常量，两个都有块级作用域，es5中是没有块级作用域的，并且<span class=\"keyword\">var</span>有变量提升，在<span class=\"keyword\">let</span>中，使用的变量一定要进行声明</span><br><span class=\"line\">\t<span class=\"number\">2</span>、箭头函数es6中的函数定义不在使用关键字<span class=\"function\"><span class=\"keyword\">function</span>，而是利用了（）=&gt;来进行定义</span></span><br><span class=\"line\"><span class=\"function\">\t3、模板字符串是增强版的字符串，用反引号（``）标识，可以当做普通字符创使用，也可以用来定义多行字符串</span></span><br><span class=\"line\"><span class=\"function\">\t4、解构赋值<span class=\"title\">es6</span>允许按照一定模式，从数组和对象中提取值，对变量进行赋值，</span></span><br><span class=\"line\"><span class=\"function\">\t5、<span class=\"title\">for</span> <span class=\"title\">of</span> 可以遍历数组，<span class=\"title\">set</span>和<span class=\"title\">map</span>解构，某些类似数组的对象，对象，以及字符串</span></span><br><span class=\"line\"><span class=\"function\">\t6、<span class=\"title\">import</span>、<span class=\"title\">export</span>导入导出<span class=\"title\">es6</span>标准中，<span class=\"title\">js</span>原生支持模块，将<span class=\"title\">js</span>代码分割成不同功能的小块进行模块化，将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用</span></span><br><span class=\"line\"><span class=\"function\">\t7、<span class=\"title\">set</span>数据结构<span class=\"title\">set</span>数据结构，类似数组，所有的数据都是唯一的，没有重复的值，它本身是一个构造函数</span></span><br><span class=\"line\"><span class=\"function\">\t8、…展开运算符可以将数组或对象里面的值展开，还可以将多个值手机为一个变量</span></span><br><span class=\"line\"><span class=\"function\">\t9、修饰器@<span class=\"title\">decorator</span>是一个函数，用来修改类甚至于是方法的行为，修饰器本质就是编译时执行的函数</span></span><br><span class=\"line\"><span class=\"function\">\t10、<span class=\"title\">class</span>类的继承<span class=\"title\">es6</span>中不再像<span class=\"title\">es5</span>一样使用原型链实现继承，而是引入<span class=\"title\">class</span>这个概念</span></span><br><span class=\"line\"><span class=\"function\">\t11、<span class=\"title\">async</span>、<span class=\"title\">await</span>的使用，搭配<span class=\"title\">promise</span>可以通过编写形式同步的代码来处理异步流程，提高代码的简洁性和可读性<span class=\"title\">async</span>用于声明一个<span class=\"function\"><span class=\"keyword\">function</span>是异步的，而<span class=\"title\">await</span>用于等待一个异步方法执行完成</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">\t12、<span class=\"title\">promise</span>是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理，更强大</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">\t13、<span class=\"title\">symbol</span>是一种基本类型，<span class=\"title\">symbol</span>通过调用<span class=\"title\">symbol</span>函数产生，它接收一个可选的名字参数，该函数返回的<span class=\"title\">symbol</span>是惟一的</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"function\">14、<span class=\"title\">proxy</span>代理使用代理<span class=\"title\">Proxy</span>监听对象的操作，然后可以做一些相应事情-</span></span></span><br></pre></td></tr></table></figure>","categories":[],"tags":[]}