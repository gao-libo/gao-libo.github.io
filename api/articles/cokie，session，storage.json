{"title":"cokie，session,localStorage","slug":"cokie，session，storage","date":"2018-09-10T02:12:36.000Z","updated":"2021-07-15T01:42:43.695Z","comments":true,"path":"api/articles/cokie，session，storage.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>cokie，session,localStorage的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cokie的内容主要包括：名字、值、过期时间、路径和域。路径与域一起构成cokie的作用范围。若不设置时间，则这个cookie的生命周期为浏览器会话期间，关闭浏览器窗口，cookie就会消失。这种生命期为浏览器会话期的cookie被称为会话期的cookie。</span><br><span class=\"line\">会话cookie一般不存储在硬盘而是保存在内存里，当然这个行为并不是规范规定的。若是设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后在打开浏览器这些cookie仍然有效知道超过设定的过期时间，对于保存在内存里的cookie，不同的浏览器有不同的处理方式。</span><br><span class=\"line\"></span><br><span class=\"line\">session机制：当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个</span><br><span class=\"line\">session标识（称为session  id） ，如果已经包含则说明以前已经为此客户端创建过session，服务器就按照session标识 id把这个session检索出来使用（检索不到的话，就会重新创建一个），如果客户端请求不包含session id，则为客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存，保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器</span><br></pre></td></tr></table></figure>\n\n<p>cookie和session的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>cookie数据存放在客户的浏览器上，session数据放在服务器上</span><br><span class=\"line\"><span class=\"number\">2.</span>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全用该使用session</span><br><span class=\"line\"><span class=\"number\">3.</span>session会在一定事件内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie</span><br><span class=\"line\"><span class=\"number\">4.</span>单个cookie保存的数据不能超过4k，很多浏览器都有一个站点最多保存<span class=\"number\">20</span>个cookie</span><br><span class=\"line\"><span class=\"number\">5.</span>建议将登录信息等重要信息存放session，其他信息如果要保留，可以放在cookie中</span><br><span class=\"line\"><span class=\"number\">6.</span>session保存在服务器，客户端不知道其中的信息，cookie保存在客户端，服务器能够知道其中的信息</span><br><span class=\"line\"><span class=\"number\">7.</span>session中保存的是对象，cookie中保存的是字符串</span><br><span class=\"line\"><span class=\"number\">8.</span>session不能区分路径，同一个用户在访问一个网站期间，所有的session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的</span><br></pre></td></tr></table></figure>\n\n<p>Web Storage和cookie的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Web Storege的概念和cookie相似，区别是它是为了更大容量存储设计的，cookie的大小是受限的，并且每次请求一个新的页面的时候cookie都会被发送过去，这样无形之中浪费了宽带，另外cookie还需要指定作用域，不可跨域调用。</span><br><span class=\"line\">除此之外，web storoage拥有setItem，getItem，removeItem，clear等方法，不想cookie需要前端开发者自己封装setCookie，getCookie，</span><br><span class=\"line\"></span><br><span class=\"line\">但是cookie也是不可或缺的，cookie的作用是与服务器进行交互，作为http规范的一部分存在的，而web Storeage仅仅是为了在本地存储数据而生</span><br><span class=\"line\"></span><br><span class=\"line\">SessionStoreage、<span class=\"built_in\">localStorage</span>、cookie都是在浏览器端讯处的数据，其中sessionStorage的概念很特别，引入了一个浏览器窗口的概念，sessionStorage是在同源窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时独立打开的不同</span><br><span class=\"line\"> sessionStorage、<span class=\"built_in\">localStorage</span>、cookie都是在浏览器端存储的数据，其中sessionStorage的概念很特别，引入了一个“浏览器窗口”的概念，sessionStorage是在同源的同窗口中，始终存在的数据，也就是说只要这个浏览器窗口没有关闭，即使刷新页面或进入同源另一个页面，数据仍然存在，关闭窗口后，sessionStorage就会被销毁，同时“独立”打开的不同窗口，即使是同一页面，sessionStorage对象也是不同的</span><br><span class=\"line\"></span><br><span class=\"line\">Es6的模板字符串有哪些新特性</span><br><span class=\"line\">\t基本的字符串格式化</span><br><span class=\"line\">\t将表达式嵌入字符串中进行拼接</span><br><span class=\"line\">\t用$&#123;&#125;来界定在es5时我们通过反斜杠（）来做多行字符串或者字符串一行行拼接，es6反引号（··）就能解决类模板字符串的功能</span><br><span class=\"line\"></span><br><span class=\"line\">介绍下set、map的区别</span><br><span class=\"line\">应用场景set用于数据重组，map用于数据储存</span><br><span class=\"line\">\tset：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>成员不鞥你重复</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span>只有键值没有键名，类似数组</span><br><span class=\"line\">\t\t<span class=\"number\">3.</span>可以遍历，方法有add，<span class=\"keyword\">delete</span>，has</span><br><span class=\"line\">\tmap：</span><br><span class=\"line\">\t\t<span class=\"number\">1.</span>本质上是键值对的集合，类似集合</span><br><span class=\"line\">\t\t<span class=\"number\">2.</span>可以遍历，可以跟各种数据格式转换</span><br><span class=\"line\"></span><br><span class=\"line\">ECMAScript6怎么写<span class=\"class\"><span class=\"keyword\">class</span>，为何会出现<span class=\"title\">class</span>？</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">Es6</span>的<span class=\"title\">class</span>可以看做是一个语法糖，它的绝大部分功能<span class=\"title\">es5</span>都可以做到，新的<span class=\"title\">class</span>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"> 1、减少网络流量：一旦数据保存在本地之后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要的来回传递</span></span><br><span class=\"line\"><span class=\"class\"> 2、快速显示数据：性能好，从本地读数据比通过网络从服务器上获得数据快得多，本地数据可以及时获得，再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示</span></span><br><span class=\"line\"><span class=\"class\"> 3、临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用<span class=\"title\">sessionStorage</span>非常方便</span></span><br></pre></td></tr></table></figure>\n\n<p>sessionStorage、localStorage和cookie的区别</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共同点：都是保存在浏览器端，且同源的区别：</span><br><span class=\"line\"><span class=\"number\">1</span>、cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和<span class=\"built_in\">localStorage</span>不会自动把数据发送给服务器，仅在本地保存。dookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</span><br><span class=\"line\"><span class=\"number\">2</span>、存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识sessionStorage和<span class=\"built_in\">localStorage</span>虽然也有存储大小的限制，但比cookie大得多，可以达到5m或更大</span><br><span class=\"line\"><span class=\"number\">3</span>、数据有效期不同sessionStorage：仅在当前浏览器窗口关闭之前有效；<span class=\"built_in\">localStorage</span>始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据，cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</span><br><span class=\"line\"><span class=\"number\">4</span>、作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</span><br><span class=\"line\">\t<span class=\"built_in\">localStorage</span>在所有同源窗口中都是共享的</span><br><span class=\"line\">\tcookie也是在所有同源创库中都是共享的</span><br><span class=\"line\"><span class=\"number\">5</span>、web Storage支持事件通知机制，可以将数据更新的通知发送给监听者</span><br><span class=\"line\"><span class=\"number\">6</span>、web Storage的api接口使用更方便</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]}