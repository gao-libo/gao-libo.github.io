{"title":"理解async await","slug":"async，await","date":"2018-10-02T00:12:36.000Z","updated":"2021-07-15T01:51:58.350Z","comments":true,"path":"api/articles/async，await.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Async <span class=\"keyword\">await</span>是用来解决异步的，<span class=\"keyword\">async</span>函数是Generator函数的语法糖使用关键字<span class=\"keyword\">async</span>来表示，在函数内部使用<span class=\"keyword\">await</span>来表示异步<span class=\"keyword\">async</span>函数返回一个promise对象，可以及使用then方法添加回调函数当函数执行的时候，一旦遇到<span class=\"keyword\">await</span>就会先返回，等到异步操作完成，在借着执行函数体内后面的语句</span><br><span class=\"line\"><span class=\"keyword\">async</span>较generator的优势<span class=\"number\">3</span></span><br><span class=\"line\">\t<span class=\"number\">1</span>、内置执行器，generator函数的执行不许依靠执行器，而<span class=\"keyword\">async</span>函数自带执行器，调用方式跟普通函数的调用一样</span><br><span class=\"line\">\t<span class=\"number\">2</span>、更好的语义，<span class=\"keyword\">async</span>和<span class=\"keyword\">await</span>相较*和<span class=\"keyword\">yield</span>更加语义化</span><br><span class=\"line\">\t<span class=\"number\">3</span>、更广的适用性，<span class=\"keyword\">yield</span>命令后面只能 是thunk函数或promise对象，<span class=\"keyword\">async</span>函数的<span class=\"keyword\">await</span>后面可以是promise也可以是原始类型的值】、</span><br><span class=\"line\"><span class=\"number\">4</span>、返回值就是promise，<span class=\"keyword\">async</span>函数返回的是promise对象，比generator函数范湖的iterator对象更方便，可以直接使用then（）方法进行调用</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]}